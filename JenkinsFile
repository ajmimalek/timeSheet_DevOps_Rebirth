pipeline {
    environment {
 	 registry = "ajmimalek/timesheetjenkins"
 	 registryCredential = 'dockerHub'
 	 dockerImage = ''
 } 
    agent any

    stages {
        stage('Getting Project from Git') {
            steps {
                echo 'Project is downloading...'
                git branch:'malek', url:'https://github.com/ajmimalek/timeSheet_DevOps_Rebirth.git'
            }
            post {
                failure {
                    mail bcc: '',
                    body: '''Hello, We would like to inform you that we couldn't download project from Git! : Please verify your network settings''',
                    cc: '',
                    from: '',
                    replyTo: '',
                    subject: '[Getting Project from Git] Failed to build',
                    to: 'ajmi.malek@esprit.tn'
                }
            }
        }
        stage('Building the project') {
            steps {
                echo "Let's build our project"
                bat 'mvn clean install'
            }
            post {
                failure {
                    mail bcc: '',
                    body: '''Hello, We would like to inform you that your project was not able to Build!''',
                    cc: '',
                    from: '',
                    replyTo: '',
                    subject: '[Building Project] Failed to build',
                    to: 'ajmi.malek@esprit.tn'
                }
            }
        }
        stage('Unit Tests') {
            steps {
                echo "Let's take a look if our project is working or not"
                bat 'mvn test'
            }
            post {
                failure {
                    mail bcc: '',
                    body: '''Hello, We would like to inform you that your unit tests have failed!''',
                    cc: '',
                    from: '',
                    replyTo: '',
                    subject: '[Unit Tests] Failed to build',
                    to: 'ajmi.malek@esprit.tn'
                }
            }
        }
        stage('Preparing the Static Tests : Jacoco') {
            steps {
                echo "In order to prepare our static tests, let's configure code coverage (Jacocco)"
                bat 'mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install'
                bat 'mvn org.jacoco:jacoco-maven-plugin:prepare-agent clean install'
            }
        }
        stage('Static Tests : SonarQube') {
            steps {
                echo 'Launching Static Tests...'
                bat 'mvn sonar:sonar'
                echo 'Visit http://localhost:9000 to see test result '
            }
            post {
                failure {
                    mail bcc: '',
                    body: '''Hello, We would like to inform you that Sonar has failed! : Please verify if Sonar is opened or not''',
                    cc: '',
                    from: '',
                    replyTo: '',
                    subject: '[Static Tests : SonarQube] Failed to build',
                    to: 'ajmi.malek@esprit.tn'
                }
            }
        }
        stage('Deploying Project : Nexus') {
            steps {
                echo 'Our project is deploying on maven-snapshots...'
                bat 'mvn clean package deploy:deploy-file -DgroupId=tn.esprit.spring -DartifactId=Timesheet -Dversion=1.2-SNAPSHOT -DgeneratePom=true -Dpackaging=war -DrepositoryId=deploymentRepo -Durl=http://localhost:8081/repository/maven-snapshots/ -Dfile=target/Timesheet-1.2-SNAPSHOT.war'
                echo 'Visit http://localhost:8081/repository/maven-snapshots/ to see test result '
            }
            post {
                failure {
                    mail bcc: '',
                    body: '''Hello, We would like to inform you that Nexus was not able to deploy project!''',
                    cc: '',
                    from: '',
                    replyTo: '',
                    subject: '[Deploying Project : Nexus] Failed to build',
                    to: 'ajmi.malek@esprit.tn'
                }
            }
        }
    	stage('Building our image') {
 			steps {
 				script {
 					echo 'Building our Docker Image ajmimalek/timesheetJenkins...'
                	bat 'docker build -t ajmimalek/timesheetjenkins .'
 				}
 			}
 			post {
                failure {
                    mail bcc: '',
                    body: '''Hello, We would like to inform you that Your docker image failed to BUILD!''',
                    cc: '',
                    from: '',
                    replyTo: '',
                    subject: '[Building Docker Image] Failed to build',
                    to: 'ajmi.malek@esprit.tn'
                }
            }
 		}
 		stage('Deploy our image') {
 			steps {
 				script {
 					echo 'Deploying';
 				}
 			}
 			post {
                failure {
                    mail bcc: '',
                    body: '''Hello, We would like to inform you that Your docker image failed to DEPLOY!''',
                    cc: '',
                    from: '',
                    replyTo: '',
                    subject: '[Deploying Docker Image] Failed to build',
                    to: 'ajmi.malek@esprit.tn'
                }
            }
 		}
 		stage('Cleaning up') {
 			steps {
 				echo 'Cleaning';
 			}
 			post {
                failure {
                    mail bcc: '',
                    body: '''Hello, We would like to inform you that Your docker image failed to CLEAN!''',
                    cc: '',
                    from: '',
                    replyTo: '',
                    subject: '[Cleaning Docker] Failed to build',
                    to: 'ajmi.malek@esprit.tn'
                }
            }
 		}
}
}